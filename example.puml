
@startuml

class Joint:

    def turn(self, angle):
        pass


class ServoJoint(Joint):
    controlPin = 0
    rangeOfMotion = 0

    def __init__(self, controlPin, rangeOfMotion=180):
        self.controlPin = controlPin
        self.rangeOfMotion = rangeOfMotion

    def turn(self, angle):
        frequency = self.angleToFrequency(angle)
        pig.set_servo_pulsewidth(self.controlPin, frequency)

    def angleToFrequency(self, angle):
        if self.rangeOfMotion == 270:
            return (1000 / 135) * angle + 1500
        else:
            return (1000 / 90) * angle + 1500


class StepperJoint(Joint):
    stepPin = 0
    directionPin = 0

    def __init__(self, stepPin, directionPin):
        self.stepPin = stepPin
        self.directionPin = directionPin
        GPIO.setup(stepPin, GPIO.OUT)
        GPIO.setup(directionPin, GPIO.OUT)

    def turn(self, targetAngle):

        currentAngle = magnetometer1.reading("accelerometer1", "y")

        while abs(currentAngle - targetAngle) < 1:

            pControl = currentAngle - targetAngle

            for x in range(pControl):
                GPIO.output(self.stepPin, GPIO.HIGH)
                sleep(delay)
                GPIO.output(self.stepPin, GPIO.LOW)
                sleep(delay)
            pass


class Sensors:

    pass

    # @abstractmethod
    # def reading(self, feature, axis):
    #    pass

    # def filter(self, value):
    #    pass


class Accelerometers(Sensors):
    # MPU6050 Registers and their Address
    PWR_MGMT_1 = 0x6B
    SMPLRT_DIV = 0x19
    CONFIG = 0x1A
    GYRO_CONFIG = 0x1B
    INT_ENABLE = 0x38
    ACCEL_XOUT = 0x3B
    ACCEL_YOUT = 0x3D
    ACCEL_ZOUT = 0x3F
    GYRO_XOUT = 0x43
    GYRO_YOUT = 0x45
    GYRO_ZOUT = 0x47

    bus = smbus.SMBus(1)

    def __init__(self, deviceAddress):

        if deviceAddress == 68:
            deviceAddress = 0x68
        elif deviceAddress == 69:
            deviceAddress = 0x69
        else:
            print("Address is wrong!")

        self.deviceAddress = deviceAddress

        # bus = smbus.SMBus(1)  # or bus = smbus.SMBus(0) for older version boards

        # write to sample rate register
        self.bus.write_byte_data(deviceAddress, self.SMPLRT_DIV, 7)

        # Write to power management register
        self.bus.write_byte_data(deviceAddress, self.PWR_MGMT_1, 1)

        # Write to Configuration register
        self.bus.write_byte_data(deviceAddress, self.CONFIG, 0)

        # Write to Gyro configuration register
        self.bus.write_byte_data(deviceAddress, self.GYRO_CONFIG, 24)

        # Write to interrupt enable register
        self.bus.write_byte_data(deviceAddress, self.INT_ENABLE, 1)

    def read_raw_data(self, registryAddress):

        try:
            # Accelerometer and Gyroscopes value are 16-bit
            high = self.bus.read_byte_data(self.deviceAddress, registryAddress)
            low = self.bus.read_byte_data(self.deviceAddress, registryAddress + 1)

            # concatenate higher and lower value
            value = ((high << 8) | low)

            # to get signed value from mpu6050
            if (value > 32768):
                value = value - 65536
            return value

        except:
            raise

    def tmp(self):
        # Read Accelerometer raw value
        acc_x = self.read_raw_data(self.ACCEL_XOUT)
        acc_y = self.read_raw_data(self.ACCEL_YOUT)
        acc_z = self.read_raw_data(self.ACCEL_ZOUT)

        # Read Gyroscope raw value
        gyro_x = self.read_raw_data(self.GYRO_XOUT)
        gyro_y = self.read_raw_data(self.GYRO_YOUT)
        gyro_z = self.read_raw_data(self.GYRO_ZOUT)

        Ax = acc_x / 16384.0
        Ay = acc_y / 16384.0
        Az = acc_z / 16384.0

        Gx = gyro_x / 131.0
        Gy = gyro_y / 131.0
        Gz = gyro_z / 131.0

        in_min = 1
        in_max = -1
        out_min = -90
        out_max = 90

        # Convert accelerometer Y axis values from 0 to 180
        value = (Ay - 1) * () / (in_max - in_min) + out_min
        value = int(value)
        print(value)

    def reading(self, feature, axis):
        if axis == "x":
            axisValue = 0
        elif axis == "y":
            axisValue = 1
        elif axis == "z":
            axisValue = 2
        else:
            print("Axis does not exist!")
            pass

        in_min = 1
        in_max = -1
        out_min = -90
        out_max = 90

        if feature == "accelerometer":
            Ay = self.read_raw_data(self.ACCEL_YOUT)
            Ay = Ay / 16384.0
            value = (Ay - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
            return value
        elif feature == "gyroscope":
            value = self.read_raw_data(self.GYRO_YOUT)
            return value
        else:
            print("Feature does not exist!")
            pass


class Magnetometers(Sensors):
    bus = smbus.SMBus(1)
    np.dataCollected = []

    def __init__(self, deviceAddress):

        if deviceAddress == 68:
            deviceAddress = 0x68
        elif deviceAddress == 69:
            deviceAddress = 0x69
        else:
            print("Address is wrong!")

        imu = MPU9250.MPU9250(smbus.SMBus(1), deviceAddress)
        self.imu = imu
        imu.begin()

    def filter(self, rotation):

        np.rotationArray = [self.imu.roll, self.imu.pitch, self.imu.yaw]

        for i in range(30):
            np.dataCollected = np.append(np.dataCollected, np.rotationArray[rotation])

        averageValue = np.average(np.dataCollected)
        np.dataCollected = []
        return averageValue

    def reading(self, choice):

        self.imu.readSensor()
        self.imu.computeOrientation()

        if choice == "roll":
            rotation = 0
            return self.filter(rotation)
        elif choice == "pitch":
            rotation = 1
            return self.filter(rotation)
        elif choice == "yaw":
            rotation = 2
            return self.filter(rotation)
        else:
            print("Wrong input!")
            pass


class Arm:
    microStepPin = 18
    GPIO.setup(microStepPin, GPIO.OUT)
    GPIO.output(microStepPin, GPIO.HIGH)

    shoulderPan = StepperJoint(5, 6)
    shoulderTilt = StepperJoint(7, 8)
    elbow = ServoJoint(23, 270)
    wristTilt = ServoJoint(24)
    wristPan = ServoJoint(25)

    # j1, j2, j3, j4, j5 = None

    shoulderPan_stepPin = None
    shoulderPan_directionPin = None
    shoulderTilt_stepPin = None
    shoulderTilt_directionPin = None
    elbow_controlPin = None
    elbow_rangeOfMotion = None
    wristTilt_controlPin = None
    wristTilt_rangeOfMotion = None
    wristPan_controlPin = None
    wristPan_rangeOfMotion = None

    def __init__(self, shoulderPan_stepPin, shoulderPan_directionPin,
                 shoulderTilt_stepPin, shoulderTilt_directionPin,
                 elbow_controlPin, elbow_rangeOfMotion,
                 wristTilt_controlPin, wristTilt_rangeOfMotion,
                 wristPan_controlPin, wristPan_rangeOfMotion):
        self.shoulderPan = StepperJoint(shoulderPan_stepPin, shoulderPan_directionPin)
        self.shoulderTilt = StepperJoint(shoulderTilt_stepPin, shoulderTilt_directionPin)
        self.elbow = ServoJoint(elbow_controlPin, elbow_rangeOfMotion)
        self.wristTilt = ServoJoint(wristTilt_controlPin, wristTilt_rangeOfMotion)
        self.wristPan = ServoJoint(wristPan_controlPin, wristPan_rangeOfMotion)

    def inverseKinematics(self):
        # Define the joint angles (in radians)
        q = np.array([0.0, 0.0, pi / 2, 0.0, pi / 2])

        # Define the DH parameters of the manipulator (a, alpha, d, theta)
        dh_params = np.array([
            [5.5, -pi / 2, -11, 0.0],
            [24.3, 0.0, 0.0, 0.0],
            [16.4, 0.0, 0.0, 0.0],
            [0.0, pi / 2, 4.0, 0.0],
            [6.3, -pi / 2, 2.5, -pi / 2]])


        T_desired = np.array([
                    [1.0, 0.0, 0.0, 15],
                    [0.0, 1.0, 0.0, 0.0],
                    [0.0, 0.0, 1.0, 0.0],
                    [0.0, 0.0, 0.0, 1.0]])

        # Define a function to compute the homogeneous transformation matrix
        # from DH parameters for a given joint angle
        def compute_transformation(alpha, a, d, theta):
            return np.array([
                [c(theta), -s(theta) * c(alpha), s(theta) * s(alpha), a * c(theta)],
                [s(theta), c(theta) * c(alpha), -c(theta) * s(alpha), a * s(theta)],
                [0, s(alpha), c(alpha), d],
                [0, 0, 0, 1.0]])

        # compute forward kinematics
        T_matrices = []
        for i in range(dh_params.shape[0]):
            a, alpha, d, theta = dh_params[i]
            T_i = np.array([
                [c(theta), -s(theta) * c(alpha), s(theta) * s(alpha), a * c(theta)],
                [s(theta), c(theta) * c(alpha), -c(theta) * s(alpha), a * s(theta)],
                [0, s(alpha), c(alpha), d],
                [0, 0, 0, 1]
            ])
            T_matrices.append(T_i)

        T = np.eye(4)
        for i in range(len(T_matrices)):
            T = T @ T_matrices[i]
        end_effector_pos = T[:3, 3]
        print(f"end_effector_pose: {end_effector_pos}")
        end_effector_pos = [25, 2.3, 0.0]
        print(f"end_effector_pose: {end_effector_pos}")

        # compute joint angles using inverse kinematics
        q1 = np.arctan2(end_effector_pos[1], end_effector_pos[0])
        q3 = np.sqrt(end_effector_pos[0] ** 2 + end_effector_pos[1] ** 2 + (end_effector_pos[2] - dh_params[2, 0]) ** 2) - (dh_params[3, 0] - dh_params[4, 0])
        q2 = -pi / 2
        q4 = np.arctan2(T[1, 0] * np.cos(q1) + T[0, 0] * np.sin(q1), -T[1, 1] * np.cos(q1) - T[0, 1] * np.sin(q1))
        q5 = np.arctan2(-T[2, 1] * np.cos(q1) * np.cos(q4) - T[2, 0] * np.sin(q1) * np.cos(q4) + T[2, 2] * np.sin(q4),
                        T[2, 1] * np.sin(q1) - T[2, 0] * np.cos(q1))

        q_dot = [q1, q2, q3, q4, q5]

        # print("Joint angles (in radians):", q_dot)

        # Update the joint angles
        q_new = q + q_dot
        # print(f"New joint angles: {np.rad2deg(q_new)}")

        def plot_ik(self):

            # plot manipulator
            fig = plt.figure()
            ax = fig.add_subplot(111, projection='3d')

            for i in range(len(T_matrices)):
                if i == 0:
                    continue
                p1 = T_matrices[i - 1][:3, 3]
                p2 = T_matrices[i][:3, 3]
                ax.plot([p1[0], p2[0]], [p1[1], p2[1]], [p1[2], p2[2]], color='blue', linewidth=3)

            ax.scatter(end_effector_pos[0], end_effector_pos[1], end_effector_pos[2], color='red', s=100)
            ax.scatter([0, 0, 0], [0, 0, 0], [0, 0, 0], color='black', s=50)
            ax.set_xlabel('X')
            ax.set_ylabel('Y')
            ax.set_zlabel('Z')
            ax.set_xlim([-55.0, 55.0])
            ax.set_ylim([-55.0, 55.0])
            ax.set_zlim([0, 25])
            plt.show()

        return q_new



# Instantiate variables


arm = Arm(14, 15, 23, 24, 25, 270, 8, 180, 4, 180)

magnetometer1 = Magnetometers(68)
magnetometer2 = Magnetometers(69)

while True:

    yawAngle = magnetometer1.reading("yaw")
    rollAngle = magnetometer1.reading("roll")
    pitchAngle = magnetometer1.reading("pitch")

    print("pitch: {:.2f} \troll: {:.2f} \tyaw: {:.2f}".format(pitchAngle, rollAngle, yawAngle))

    sleep(0.1)
 @enduml